name: Enable/Disable New Relic Synthetic Monitor with name

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (enable or disable)'
        required: true
        default: 'enable'
        options:
          - 'enable'
          - 'disable'

jobs:
  enable-disable-monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: List monitors
        id: list-monitors
        run: |
          monitors=$(curl -s -X GET -H "Api-Key: NRAK-P5ZRWJG8TH6LV2D9YQQT8AJ72PL" \
            "https://synthetics.newrelic.com/synthetics/api/v3/monitors" \
            | jq -r '.monitors[] | select(.name | startswith("QA")) | .name')
          echo "$monitors" > monitors.txt

      - name: Enable or Disable Synthetic Monitors
        run: |
          if [ "${{ github.event.inputs.action }}" == "enable" ]; then
            monitors_to_enable=$(cat monitors.txt)
            if [ -n "$monitors_to_enable" ]; then
              for monitor_name in $monitors_to_enable; do
                monitor_id=$(curl -s -X GET -H "Api-Key: NRAK-P5ZRWJG8TH6LV2D9YQQT8AJ72PL" \
                  "https://synthetics.newrelic.com/synthetics/api/v3/monitors" \
                  | jq -r --arg name "$monitor_name" '.monitors[] | select(.name == $name) | .id')
                curl -X PATCH -H "Api-Key: NRAK-P5ZRWJG8TH6LV2D9YQQT8AJ72PL" \
                  -H 'Content-Type: application/json' \
                  "https://synthetics.newrelic.com/synthetics/api/v3/monitors/$monitor_id" \
                  -d '{ "status" : "enabled" }'
                echo "Synthetic monitor ($monitor_name) enabled."
              done
            else
              echo "No disabled monitors to enable."
            fi
          elif [ "${{ github.event.inputs.action }}" == "disable" ]; then
            monitors_to_disable=$(cat monitors.txt)
            if [ -n "$monitors_to_disable" ]; then
              for monitor_name in $monitors_to_disable; do
                monitor_id=$(curl -s -X GET -H "Api-Key: NRAK-P5ZRWJG8TH6LV2D9YQQT8AJ72PL" \
                  "https://synthetics.newrelic.com/synthetics/api/v3/monitors" \
                  | jq -r --arg name "$monitor_name" '.monitors[] | select(.name == $name) | .id')
                curl -X PATCH -H "Api-Key: NRAK-P5ZRWJG8TH6LV2D9YQQT8AJ72PL" \
                  -H 'Content-Type: application/json' \
                  "https://synthetics.newrelic.com/synthetics/api/v3/monitors/$monitor_id" \
                  -d '{ "status" : "disabled" }'
                echo "Synthetic monitor ($monitor_name) disabled."
              done
            else
              echo "No enabled monitors to disable."
            fi
          fi

      - name: Notify Slack
        if: ${{ github.event.inputs.action == 'disable' || github.event.inputs.action == 'enable' }}
        run: |
          action="${{ github.event.inputs.action }}"
          monitors_list=$(cat monitors.txt | tr '\n' ', ' | sed 's/,$//')
          message="Synthetic monitors $action action completed. Monitors: $monitors_list"
          SLACK_WEBHOOK_URL="https://hooks.slack.com/services/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"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" "$SLACK_WEBHOOK_URL"
