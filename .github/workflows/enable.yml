name: Enable/Disable New Relic Synthetic Monitor with name

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (enable or disable)'
        required: true
        default: 'enable'
        options:
          - 'enable'
          - 'disable'

jobs:
  enable-disable-monitor:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_DEFAULT_REGION: us-east-1
      NEWRELIC_API_SECRET_NAME: /ecomm/synthetic-monitor-qa/newrelic-api
      SLACK_WEBHOOK_SECRET_NAME: /ecomm/synthetic-monitor-qa/slack_webhook

    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: arn:aws:iam::476057914212:role/github-action-role
          role-session-name: MySessionName

      - name: Get New Relic API key from AWS Secrets Manager
        id: newrelic-secret
        run: |
          NEWRELIC_API_KEY=$(aws secretsmanager get-secret-value --secret-id $NEWRELIC_API_SECRET_NAME --query 'SecretString.api_key' --output text)
          echo "Retrieved New Relic API Key: $NEWRELIC_API_KEY"
          echo "::set-output name=NEWRELIC_API_KEY::$NEWRELIC_API_KEY"
        shell: bash

      - name: List monitors
        id: list-monitors
        run: |
          monitors=$(curl -s -X GET -H "Api-Key:${{ steps.newrelic-secret.outputs.NEWRELIC_API_KEY }}" \
            "https://synthetics.newrelic.com/synthetics/api/v3/monitors" \
            | jq '[.monitors[] | select(.name | startswith("QA"))]')
          echo "$monitors" > monitors.json

      - name: Enable or Disable Synthetic Monitors
        run: |
          if [ "${{ github.event.inputs.action }}" == "enable" ]; then
            # Enable monitors logic here
            # ...
            echo "Monitors enabled."
          elif [ "${{ github.event.inputs.action }}" == "disable" ]; then
            # Disable monitors logic here
            # ...
            echo "Monitors disabled."
          fi

      - name: Get Slack Webhook URL from AWS Secrets Manager
        id: slack-secret
        run: |
          SLACK_WEBHOOK_URL=$(aws secretsmanager get-secret-value --secret-id $SLACK_WEBHOOK_SECRET_NAME --query 'SecretString.slack_webhook' --output text)
          echo "Retrieved Slack Webhook URL: $SLACK_WEBHOOK_URL"
          echo "::set-output name=SLACK_WEBHOOK_URL::$SLACK_WEBHOOK_URL"
        shell: bash

      - name: Notify Slack for disable
        if: ${{ github.event.inputs.action == 'disable' }}
        run: |
          # Slack notification logic for disable action
          # ...
          echo "Notifying Slack for disable action."
        
      - name: Notify Slack for enable
        if: ${{ github.event.inputs.action == 'enable' }}
        run: |
          # Slack notification logic for enable action
          # ...
          echo "Notifying Slack for enable action."
