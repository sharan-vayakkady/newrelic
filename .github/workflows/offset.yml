name: newrelic_qa_final_2023-10-19_1

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (enable or disable)'
        required: true
        default: 'enable'
        options:
          - 'enable'
          - 'disable'

jobs:
  enable-disable-monitor:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: arn:aws:iam::476057914212:role/github-action-role
          role-session-name: MySessionName
      
      - name: Get newrelic secret from Secret Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids:
            API_KEY,/ecomm/synthetic-monitor-qa/newrelic-api

      - name: Get slack webhook from Secret Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids:
            SLACK_WEBHOOK,/ecomm/synthetic-monitor-qa/slack_webhook

      - name: List monitors
        id: list-monitors
        run: |
          monitors=()
          offset=0
          while true; do
            total=$(curl -s -X GET -H "Api-Key:${{ env.API_KEY }}" -G -d "offset=$offset&limit=100" \
            "https://synthetics.newrelic.com/synthetics/api/v3/monitors" | jq '[.monitors[]]')
            response=$(curl -s -X GET -H "Api-Key:${{ env.API_KEY }}" -G -d "offset=$offset&limit=100" \
            "https://synthetics.newrelic.com/synthetics/api/v3/monitors" | jq '[.monitors[] | select(.name | startswith("QA"))]')
            monitors+=($(echo "$response" | jq -r '.[]'))
            if [[ $(echo "$total" | jq -r 'length') -lt 100 ]]; then
              break
            fi
            offset=$((offset + 100))
          done
          echo "${monitors[@]}" > monitors.json

      - name: Enable or Disable Synthetic Monitors
        run: |
          if [ "${{ github.event.inputs.action }}" == "enable" ]; then
            monitors_to_enable=$(cat monitors.json | jq -r '.[] | select(.status == "DISABLED") | .id')
            monitors_to_enable_name=$(cat monitors.json | jq -r '.[] | select(.status == "DISABLED") | .name')
            if [ -n "$monitors_to_enable" ]; then
              for monitor_id in $monitors_to_enable; do
                curl -X PATCH -H "Api-Key:${{ env.API_KEY }}" \
                  -H 'Content-Type: application/json' \
                  "https://synthetics.newrelic.com/synthetics/api/v3/monitors/$monitor_id" \
                  -d '{ "status" : "enabled" }'
                echo "Synthetic monitor ($monitor_id) enabled."
              done
              message="Enabled monitors:\n$monitors_to_enable_name"
            else
              echo "No disabled monitors to enable."
              message="No disabled monitors to enable."
            fi
          elif [ "${{ github.event.inputs.action }}" == "disable" ]; then
            monitors_to_disable=$(cat monitors.json | jq -r '.[] | select(.status == "ENABLED") | .id')
            monitors_to_disable_name=$(cat monitors.json | jq -r '.[] | select(.status == "ENABLED") | .name')
            if [ -n "$monitors_to_disable" ]; then
              for monitor_id in $monitors_to_disable; do
                curl -X PATCH -H "Api-Key:${{ env.API_KEY }}" \
                  -H 'Content-Type: application/json' \
                  "https://synthetics.newrelic.com/synthetics/api/v3/monitors/$monitor_id" \
                  -d '{ "status" : "disabled" }'
                echo "Synthetic monitor ($monitor_id) disabled."
              done
              message="Disabled monitors:\n$monitors_to_disable_name"
            else
              echo "No enabled monitors found. Skipping disable action."
              message="No enabled monitors found. Skipping disable action."
            fi
          fi
          echo "$message" > monitors_status.txt

      - name: Notify Slack
        run: |
          monitors_status=$(cat monitors_status.txt)
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$monitors_status\"}" $SLACK_WEBHOOK
